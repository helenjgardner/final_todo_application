{"version":3,"sources":["TotalItemStatus.js","AddItem.js","TaskToDo.js","TaskComplete.js","App.js","index.js"],"names":["TotalItemStatus","className","this","props","count","text","React","Component","AddItem","state","newTaskText","updateTaskText","event","setState","target","value","handleClick","addTaskFunc","id","type","maxLength","placeholder","onChange","onClick","TaskToDo","handleClickDel","ev","window","confirm","deleteTaskFunc","handleClickDone","toggleTaskFunc","handleDateChange","date","setDateDueFunc","handleClickEdit","newText","prompt","task","editTaskFunc","title","utils","DateFnsUtils","Grid","container","label","format","dateDue","minDate","moment","KeyboardButtonProps","TaskComplete","handleClickUnDone","dateDone","App","tasks","completed","add","uuid","addTask","taskText","newTask","tasksCopy","slice","push","alert","deleteTask","filter","item","toggleTaskStatus","result","forEach","setDateDue","editTask","tasksToDo","sort","a","b","tasksDone","length","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc44c3fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TotalItemStatus.css\";\n\nclass TotalItemStatus extends React.Component {\n    render() {\n        return (\n            <div className=\"col-12 col-sm-6 red\">\n                {this.props.count} {this.props.text}\n            </div>\n        )\n    }\n}\n\nexport default TotalItemStatus;","import React from \"react\";\nimport \"./AddItem.css\";\n\nclass AddItem extends React.Component {\n    state = {\n        newTaskText: \"\"\n    }\n\n    updateTaskText = (event) => {\n        this.setState({\n            newTaskText: event.target.value\n        })\n    }\n\n    handleClick = () => {\n        this.props.addTaskFunc(this.state.newTaskText);\n        this.setState({\n            newTaskText: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-9\">\n                    <div className=\"mt-3 mb-3\">\n                        <input\n                            id=\"addItemInput\"\n                            type=\"text\"\n                            maxLength=\"85\"\n                            className=\"form-control\"\n                            placeholder=\"New task description (max length 85)\"\n                            value={this.state.newTaskText}\n                            onChange={this.updateTaskText}\n                        />\n                    </div>\n                </div>\n                <div className=\"col-12 col-sm-3\">\n                    <div className=\"mt-3 mb-3\">\n                        <button id=\"AddButton\" className=\"btn btn-success\" onClick={this.handleClick}>\n                            Add to list\n                       </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddItem;","import React from \"react\";\nimport \"./TaskToDo.css\";\nimport 'date-fns';\nimport moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker\n} from '@material-ui/pickers';\n\n\n\nclass TaskToDo extends React.Component {\n    handleClickDel = (ev) => {\n        if (window.confirm('Are you sure you want to delete?')) {\n            this.props.deleteTaskFunc(this.props.id);\n        }\n    }\n\n    handleClickDone = () => {\n        // done = true since task was not done and now is\n        this.props.toggleTaskFunc(this.props.id, true);\n    }\n\n    handleDateChange = (date) => {\n        this.props.setDateDueFunc(this.props.id, date);\n    }\n\n    handleClickEdit = () => {\n        var newText = prompt('Update task details', this.props.task);\n        this.props.editTaskFunc(this.props.id, newText)\n    }\n\n    render() {\n        return (\n            <div className=\"row toDo align-items-center rounded\">\n                <div className=\"col-4 col-sm-3 col-md-3 align-middle\">\n                    <i className=\"fas fa-trash-alt pad\"\n                        title=\"Delete Task\"\n                        onClick={this.handleClickDel}>\n                    </i>\n                    <i className=\"fas fa-clipboard-check green pad\" \n                        title=\"Mark as Done\"\n                        onClick={this.handleClickDone} >\n                    </i>\n                    <i className=\"fas fa-pencil-alt blue\"\n                        title=\"Edit\"\n                        onClick={this.handleClickEdit} >\n                    </i>\n                </div>\n                \n                <div className=\"col-8 col-sm-5 col-md-5 align-bottom\">\n                    {this.props.task}\n                </div>\n                <div className=\"col-12 col-sm-4 col-md-4 align-text-top\" >\n                    \n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <Grid container>\n                            <KeyboardDatePicker\n                                // margin=\"normal\"\n                                id=\"date-picker-dialog\"\n                                label=\"Date Due\"\n                                format=\"dd/MM/yyyy\"\n                                value={this.props.dateDue}\n                                minDate={moment()}\n                                onChange={this.handleDateChange}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                            />\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default TaskToDo;\n","import React from \"react\";\nimport \"./TaskComplete.css\";\nimport moment from 'moment';\n\n\nclass TaskComplete extends React.Component {\n    handleClick = (ev) => {\n        if (window.confirm('Are you sure you want to delete?')) {\n            this.props.deleteTaskFunc(this.props.id);\n        }\n    }\n    handleClickUnDone = () => {\n        // done = false since task was done but now isn't\n        this.props.toggleTaskFunc(this.props.id, false);\n    }\n   \n    render() {\n        return (\n\n            <div className=\"row done rounded align-items-center\">\n                <div className=\"col-3 col-sm-3 col-md-2\">\n                    <i className=\"fas fa-trash-alt pad\" title=\"Delete Task\" onClick={this.handleClick} >\n                    </i>\n                    <i className=\"fas fa-undo blue\" onClick={this.handleClickUnDone}\n                    title=\"Mark task incomplete\"></i>\n                </div>\n\n                <div className=\"col-9 col-sm-5 col-md-6 greyItalic\" >\n                    {this.props.task}\n                </div>\n\n                <div className=\"col-12 col-sm-4 col-md-4 greyItalic\">\n                    Done {moment(this.props.dateDone, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}\n                </div>\n            </div >\n\n        );\n\n    }\n\n}\n\nexport default TaskComplete;","import React from 'react';\nimport './App.css';\nimport uuid from \"uuid/v4\";\nimport TotalItemStatus from './TotalItemStatus';\nimport AddItem from \"./AddItem\";\nimport TaskToDo from \"./TaskToDo\";\nimport TaskComplete from \"./TaskComplete\";\nimport moment from 'moment';\n\nclass App extends React.Component {\n\n  state = {\n    tasks: [\n      {\n        text: \"clean driveway\", completed: false,\n        dateDue: moment().add(7, 'days').format(\"YYYY-MM-DD\"), dateDone: \"\", id: uuid()\n      },\n      {\n        text: \"paint landing\", completed: false,\n        dateDue: moment().add(2, 'days').format(\"YYYY-MM-DD\"), dateDone: \"\", id: uuid()\n      },\n      {\n        text: \"mend trousers\", completed: false,\n        dateDue: moment().add(3, 'days').format(\"YYYY-MM-DD\"), dateDone: \"\", id: uuid()\n      },\n      {\n        text: \"change dishwasher salt\", completed: true,\n        dateDue: \"\", dateDone: \"2019-10-12\", id: uuid()\n      },\n      {\n        text: \"buy crayons\", completed: true,\n        dateDue: \"\", dateDone: \"2019-09-01\", id: uuid()\n      },\n      {\n        text: \"a really, really, long task to display\", completed: false,\n        dateDue: moment().add(8, 'days').format(\"YYYY-MM-DD\"), dateDone: \"2019-09-01\", id: uuid()\n      }\n    ]\n  }\n\n  // called when user selects 'add task' - user then updates date due.  Defaulted to a week\n  addTask = (taskText) => {\n    if (taskText === \"\") {\n      alert('Task cannot be blank - please try again');\n      return;\n    }\n    const newTask = {\n      text: taskText,\n      completed: false,\n      dateDue: moment().add(7, 'days').format(\"YYYY-MM-DD\"),\n      dateDone: \"\",\n      id: uuid()\n    };\n\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.push(newTask);\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to delete task whether task is done or not\n  deleteTask = (id) => {\n    const tasksCopy = this.state.tasks.filter(item => {\n      return item.id !== id;\n    });\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to mark as task as done or a complete task as not done\n  toggleTaskStatus = (id, result) => {\n    // if result is true then dealing with task changing from 'not done' to 'done'\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) {\n        // completed can be set to result\n        item.completed = result;\n        // if true then dateDone is set to today, otherwise it's undone and dateDone is blank\n        if (result) {\n          item.dateDone = moment();\n        }\n        else {\n          item.dateDone = '';\n          item.dateDue = moment().add(7, 'days').format(\"YYYY-MM-DD\");\n        };\n      }\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to set due date\n  setDateDue = (id, date) => {\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) { item.dateDue = date };\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to edit an incomplete task - user cannot edit a done task\n  editTask = (id, newText) => {\n    if (newText === \"\") {\n      alert('Task cannot be blank - please try again');\n      return;\n    }\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) { item.text = newText };\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  render() {\n\n    // split tasks into done and not done and sort them\n    const tasksToDo = this.state.tasks.filter(item => { return !item.completed })\n    tasksToDo.sort(function (a, b) { return moment(a.dateDue).format('YYYYMMDD') - moment(b.dateDue).format('YYYYMMDD') })\n    const tasksDone = this.state.tasks.filter(item => { return item.completed })\n    tasksDone.sort(function (a, b) { return moment(a.dateDone).format('YYYYMMDD') - moment(b.dateDone).format('YYYYMMDD') })\n\n    return (\n      <div>\n        <br />\n        \n        <div className=\"container \">\n        <h4> Today's ({moment().format(\"ddd Do MMM\")}) List </h4>\n          <div className=\"row\" id=\"totalItem\">\n            <hr />\n            <TotalItemStatus count={tasksToDo.length} text=\"Tasks Still to Complete\" />\n            <TotalItemStatus count={tasksDone.length} text=\"Tasks Already Done! \" />\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <hr />\n              <AddItem addTaskFunc={this.addTask} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 col-lg-6\" >\n              <div className=\"col-12\">\n                <div className=\"row\" >\n                  <h5> Tasks Still to Complete </h5>\n                </div>\n                {tasksToDo.map(item => {\n                  return <TaskToDo key={item.id}\n                    id={item.id}\n                    task={item.text}\n                    completed={item.completed}\n                    dateDue={item.dateDue}\n                    deleteTaskFunc={this.deleteTask}\n                    toggleTaskFunc={this.toggleTaskStatus}\n                    setDateDueFunc={this.setDateDue}\n                    editTaskFunc={this.editTask} />\n                })}\n              </div>\n              <br /> \n            </div>\n            \n            <div className=\"col-12 col-lg-6\">\n              <div className=\"col-12\">\n                <div className=\"row\" >\n                  <h5> Tasks Already Done!</h5>\n                </div>\n                {tasksDone.map(item => {\n                  return <TaskComplete key={item.id}\n                    id={item.id}\n                    task={item.text}\n                    completed={item.completed}\n                    dateDone={item.dateDone}\n                    deleteTaskFunc={this.deleteTask}\n                    toggleTaskFunc={this.toggleTaskStatus}\n                  />\n                })}\n              </div>\n            </div>\n          </div>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}
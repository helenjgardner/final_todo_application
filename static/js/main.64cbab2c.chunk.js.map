{"version":3,"sources":["TotalItemStatus.js","AddItem.js","TaskToDo.js","TaskComplete.js","App.js","index.js"],"names":["TotalItemStatus","className","this","props","count","text","React","Component","AddItem","state","newTaskText","updateTaskText","event","setState","target","value","handleClick","addTaskFunc","id","type","maxLength","placeholder","onChange","onClick","TaskToDo","handleClickDel","confirmAlert","title","message","task","buttons","label","deleteTaskFunc","closeOnEscape","closeOnClickOutside","handleClickDone","toggleTaskFunc","handleDateChange","date","setDateDueFunc","handleClickEdit","newText","prompt","editTaskFunc","utils","DateFnsUtils","Grid","container","format","dateDue","minDate","moment","KeyboardButtonProps","TaskComplete","handleClickUnDone","dateDone","App","tasks","addTask","taskText","newTask","completed","add","axios","post","then","response","console","log","data","taskID","tasksCopy","slice","push","catch","error","deleteTask","filter","item","toggleTaskStatus","result","forEach","setDateDue","editTask","get","tasksToDo","sort","a","b","tasksDone","length","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64cbab2c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TotalItemStatus.css\";\n\nclass TotalItemStatus extends React.Component {\n    render() {\n        return (\n            <div className=\"col-12 col-sm-6 red\">\n                {this.props.count} {this.props.text}\n            </div>\n        )\n    }\n}\n\nexport default TotalItemStatus;","import React from \"react\";\nimport \"./AddItem.css\";\n\nclass AddItem extends React.Component {\n    state = {\n        newTaskText: \"\"\n    }\n\n    updateTaskText = (event) => {\n        this.setState({\n            newTaskText: event.target.value\n        })\n    }\n\n    handleClick = () => {\n        this.props.addTaskFunc(this.state.newTaskText);\n        this.setState({\n            newTaskText: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-9\">\n                    <div className=\"mt-3 mb-3\">\n                        <input\n                            id=\"addItemInput\"\n                            type=\"text\"\n                            maxLength=\"85\"\n                            className=\"form-control\"\n                            placeholder=\"New task description (max length 85)\"\n                            value={this.state.newTaskText}\n                            onChange={this.updateTaskText}\n                        />\n                    </div>\n                </div>\n                <div className=\"col-12 col-sm-3\">\n                    <div className=\"mt-3 mb-3\">\n                        <button id=\"AddButton\" className=\"btn btn-success\" onClick={this.handleClick}>\n                            Add to list\n                       </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddItem;","import React from \"react\";\nimport \"./TaskToDo.css\";\nimport 'date-fns';\nimport moment from 'moment';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker\n} from '@material-ui/pickers';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\n\n\n\nclass TaskToDo extends React.Component {\n    handleClickDel = () => {\n        confirmAlert({\n          title: 'Delete Task',\n          message: 'Are you sure you want to delete this task \"' + this.props.task +'\"?',\n          buttons: [\n            {\n              label: 'Cancel',\n              onClick: () => {}\n            },\n            {\n              label: 'Ok',\n              onClick: () => this.props.deleteTaskFunc(this.props.id)\n            }\n          ],\n          closeOnEscape: true,\n          closeOnClickOutside: true,\n    \n        })\n      };\n\n    handleClickDone = () => {\n        // done = true since task was not done and now is\n        this.props.toggleTaskFunc(this.props.id, true);\n    }\n\n    handleDateChange = (date) => {\n        this.props.setDateDueFunc(this.props.id, date);\n    }\n\n    handleClickEdit = () => {\n        var newText = prompt('Update task details', this.props.task);\n        this.props.editTaskFunc(this.props.id, newText)\n    }\n\n    render() {\n        return (\n            <div className=\"row toDo align-items-center rounded\">\n                <div className=\"col-4 col-sm-3 col-md-3 align-middle\">\n                    <i className=\"fas fa-trash-alt pad\"\n                        title=\"Delete Task\"\n                        onClick={this.handleClickDel}>\n                    </i>\n                    <i className=\"fas fa-clipboard-check green pad\" \n                        title=\"Mark as Done\"\n                        onClick={this.handleClickDone} >\n                    </i>\n                    <i className=\"fas fa-pencil-alt blue\"\n                        title=\"Edit\"\n                        onClick={this.handleClickEdit} >\n                    </i>\n                </div>\n                \n                <div className=\"col-8 col-sm-5 col-md-5 align-bottom\">\n                    {this.props.task}\n                </div>\n                <div className=\"col-12 col-sm-4 col-md-4 align-text-top\" >\n                    \n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <Grid container>\n                            <KeyboardDatePicker\n                                // margin=\"normal\"\n                                id=\"date-picker-dialog\"\n                                label=\"Date Due\"\n                                format=\"dd/MM/yyyy\"\n                                value={this.props.dateDue}\n                                minDate={moment()}\n                                onChange={this.handleDateChange}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                            />\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default TaskToDo;\n","import React from \"react\";\nimport \"./TaskComplete.css\";\nimport moment from 'moment';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\n\n\n\nclass TaskComplete extends React.Component {\n  handleClick = () => {\n    confirmAlert({\n      title: 'Delete Task',\n      message: 'Are you sure you want to delete this task \"' + this.props.task +'\"?',\n      buttons: [\n        {\n          label: 'Cancel',\n          onClick: () => {}\n        },\n        {\n          label: 'Ok',\n          onClick: () => this.props.deleteTaskFunc(this.props.id)\n        }\n      ],\n      closeOnEscape: true,\n      closeOnClickOutside: true,\n\n    })\n  };\n\n  handleClickUnDone = () => {\n    // done = false since task was done but now isn't\n    this.props.toggleTaskFunc(this.props.id, false);\n  }\n\n\n  render() {\n    return (\n\n      <div className=\"row done rounded align-items-center\">\n        <div className=\"col-3 col-sm-3 col-md-2\">\n          <i className=\"fas fa-trash-alt pad\" title=\"Delete Task\" onClick={this.handleClick} >\n          </i>\n          <i className=\"fas fa-undo blue\" onClick={this.handleClickUnDone}\n            title=\"Mark task incomplete\"></i>\n        </div>\n\n        <div className=\"col-9 col-sm-5 col-md-6 greyItalic\" >\n          {this.props.task}\n        </div>\n\n        <div className=\"col-12 col-sm-4 col-md-4 greyItalic\">\n          Done {moment(this.props.dateDone, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}\n        </div>\n      </div >\n\n    );\n\n  }\n\n}\n\nexport default TaskComplete;","import React from 'react';\nimport './App.css';\n// import uuid from \"uuid/v4\";\nimport TotalItemStatus from './TotalItemStatus';\nimport AddItem from \"./AddItem\";\nimport TaskToDo from \"./TaskToDo\";\nimport TaskComplete from \"./TaskComplete\";\nimport moment from 'moment';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n\n  state = {\n    tasks: [\n      // {\n      //   text: \"clean driveway\", completed: false,\n      //   dateDue: moment().add(7, 'days').format(\"YYYY-MM-DD\"), dateDone: \"\", id: uuid()\n      // }\n    ]\n  }\n\n  componentDidMount(){\n    // make asynch request to get tasks \n    axios.get('https://ofe1t56so4.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n  .then( (response) => {\n    // handle success\n    // console.log(response.data.tasks);\n    this.setState({tasks: response.data.tasks})\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  }\n\n  // called when user selects 'add task' - user then updates date due.  Defaulted to a week\n  addTask = (taskText) => {\n    if (taskText === \"\") {\n      confirmAlert({\n        message: 'Task cannot be blank - please try again',\n        buttons: [\n          {\n            label: 'Ok',\n            onClick: () => {}\n          }\n        ],\n        closeOnEscape: true,\n        closeOnClickOutside: true,\n     })\n    return;\n    }\n   \n    const newTask = {\n      text: taskText,\n      completed: false,\n      dateDue: moment().add(7, 'days').format(\"YYYY-MM-DD\"),\n      dateDone: \"\",\n      id: \"\"\n    };\n\n    axios.post('https://ofe1t56so4.execute-api.eu-west-2.amazonaws.com/dev/tasks', newTask) \n    .then( (response) =>{\n      console.log(response.data.taskID);\n      newTask.id=response.data.taskID;\n      const tasksCopy = this.state.tasks.slice();\n      tasksCopy.push(newTask);\n      this.setState({\n        tasks: tasksCopy\n      })\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  // called to delete task whether task is done or not\n  deleteTask = (id) => {\n    const tasksCopy = this.state.tasks.filter(item => {\n      return item.id !== id;\n    });\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to mark as task as done or a complete task as not done\n  toggleTaskStatus = (id, result) => {\n    // if result is true then dealing with task changing from 'not done' to 'done'\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) {\n        // completed can be set to result\n        item.completed = result;\n        // if true then dateDone is set to today, otherwise it's undone and dateDone is blank\n        if (result) {\n          item.dateDone = moment();\n        }\n        else {\n          item.dateDone = '';\n          item.dateDue = moment().add(7, 'days').format(\"YYYY-MM-DD\");\n        };\n      }\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to set due date\n  setDateDue = (id, date) => {\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) { item.dateDue = date };\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  // called to edit an incomplete task - user cannot edit a done task\n  editTask = (id, newText) => {\n    if (newText === \"\") {\n      confirmAlert({\n        message: 'Task cannot be blank - please try again',\n        buttons: [\n          {\n            label: 'Ok',\n            onClick: () => {}\n          }\n        ],\n        closeOnEscape: true,\n        closeOnClickOutside: true,\n     })\n      return;\n    }\n    const tasksCopy = this.state.tasks.slice();\n    tasksCopy.forEach(item => {\n      if (item.id === id) { item.text = newText };\n    })\n    this.setState({\n      tasks: tasksCopy\n    })\n  }\n\n  render() {\n\n    // split tasks into done and not done and sort them\n    const tasksToDo = this.state.tasks.filter(item => { return !item.completed })\n    tasksToDo.sort(function (a, b) { return moment(a.dateDue).format('YYYYMMDD') - moment(b.dateDue).format('YYYYMMDD') })\n    const tasksDone = this.state.tasks.filter(item => { return item.completed })\n    tasksDone.sort(function (a, b) { return moment(a.dateDone).format('YYYYMMDD') - moment(b.dateDone).format('YYYYMMDD') })\n\n    return (\n      <div>\n        <br />\n        \n        <div className=\"container \">\n        <h4> Today's ({moment().format(\"ddd Do MMM\")}) List </h4>\n          <div className=\"row\" id=\"totalItem\">\n            <hr />\n            <TotalItemStatus count={tasksToDo.length} text=\"Tasks Still to Complete\" />\n            <TotalItemStatus count={tasksDone.length} text=\"Tasks Already Done! \" />\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <hr />\n              <AddItem addTaskFunc={this.addTask} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 col-lg-6\" >\n              <div className=\"col-12\">\n                <div className=\"row\" >\n                  <h5> Tasks Still to Complete </h5>\n                </div>\n                {tasksToDo.map(item => {\n                  return <TaskToDo key={item.id}\n                    id={item.id}\n                    task={item.text}\n                    completed={item.completed}\n                    dateDue={item.dateDue}\n                    deleteTaskFunc={this.deleteTask}\n                    toggleTaskFunc={this.toggleTaskStatus}\n                    setDateDueFunc={this.setDateDue}\n                    editTaskFunc={this.editTask} />\n                })}\n              </div>\n              <br /> \n            </div>\n            \n            <div className=\"col-12 col-lg-6\">\n              <div className=\"col-12\">\n                <div className=\"row\" >\n                  <h5> Tasks Already Done!</h5>\n                </div>\n                {tasksDone.map(item => {\n                  return <TaskComplete key={item.id}\n                    id={item.id}\n                    task={item.text}\n                    completed={item.completed}\n                    dateDone={item.dateDone}\n                    deleteTaskFunc={this.deleteTask}\n                    toggleTaskFunc={this.toggleTaskStatus}\n                  />\n                })}\n              </div>\n            </div>\n          </div>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}